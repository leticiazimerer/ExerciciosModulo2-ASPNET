<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlogPessoalVS</name>
    </assembly>
    <members>
        <member name="M:BlogPessoalVS.src.controladores.PostagemControlador.PegarPostagemPeloIdAsync(System.Int32)">
            <summary>
            Pegar Postagem pelo Id
            </summary>
            <param name="idPostagem">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna a postagem</response>
            <response code="404">Postagem não existente</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.PostagemControlador.NovaPostagemAsync(BlogPessoalVS.src.dtos.NovaPostagemDTO)">
             <summary>
             Criar nova Posyagem
             </summary>
             <param name="postagem">NovaPostagemDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 POST /api/Postagens
                 {
                    "titulo": "BBB21",
                    "descricaoTema": "Arthur Aguiar trai a esposa pela 18ª antes de entrar no BBB21",      
                    "nomeCriador": "Leticia Zimerer",      
                 }
            
             </remarks>
             <response code="201">Retorna postagem criada</response>
             <response code="400">Erro na requisição</response>
             <response code="401">DescricaoTema ja cadastrado</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.PostagemControlador.AtualizarPostagem(BlogPessoalVS.src.dtos.AtualizarPostagemDTO)">
             <summary>
             Atualizar Postagem
             </summary>
             <param name="postagem">AtualizarPostagemDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 PUT /api/Postagens
                 {
                    "titulo": "BBB22",
                    "descricao": "ERRATA: Arthur Aguiar trai a esposa pela 18ª antes de entrar no BBB22",
                    "foto": "URLFOTO",
                    "tema": "Realits Shows"
                 }
            
             </remarks>
             <response code="200">Retorna postagem atualizada</response>
             <response code="400">Erro na requisição</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.PostagemControlador.DeletarPostagemAsync(System.Int32)">
            <summary>
            Deletar Postagem pelo Id
            </summary>
            <param name="idPostagem">int</param>
            <returns>ActionResult</returns>
            <response code="204">Postagem deletada</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.TemaControlador.PegarTemaPeloIdAsync(System.Int32)">
            <summary>
            Pegar Tema pelo Id
            </summary>
            <param name="idTema">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o tema</response>
            <response code="404">Tema não existente</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.TemaControlador.PegarTemaPelaDescricaoAsync(System.String)">
            <summary>
            Pegar Tema pela Descrição
            </summary>
            <param name="descricaoTema">string</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna a Tema</response>
            <response code="204">Descrição não existe</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.TemaControlador.NovoTemaAsync(BlogPessoalVS.src.dtos.NovoTemaDTO)">
             <summary>
             Criar novo Tema
             </summary>
             <param name="tema">NovoTemaDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 POST /api/Temas
                 {
                    "descricao": "Arthur Aguiar trai a esposa pela 18ª antes de entrar no BBB21",
                    "postagensRelacionadas": "BBB21 - Tudo sobre Arthur",
                 }
            
             </remarks>
             <response code="201">Retorna tema criado</response>
             <response code="400">Erro na requisição</response>
             <response code="401">Tema ja cadastrado</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.TemaControlador.AtualizarTemaAsync(BlogPessoalVS.src.dtos.AtualizarTemaDTO)">
             <summary>
             Atualizar Tema
             </summary>
             <param name="tema">AtualizarTemaDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 PUT /api/Temas
                 {
                    "descricao": "Arthur Aguiar trai a esposa pela 18ª antes de entrar no BBB21",
                    "postagensRelacionadas": "BBB22 - Tudo sobre Juliette",
                 }
            
             </remarks>
             <response code="200">Retorna usuario atualizado</response>
             <response code="400">Erro na requisição</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.TemaControlador.DeletarTemaAsync(System.Int32)">
            <summary>
            Deletar Tema pelo Id
            </summary>
            <param name="idTema">int</param>
            <returns>ActionResult</returns>
            <response code="204">Tema deletado</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.UsuarioControlador.PegarUsuarioPeloIdAsync(System.Int32)">
            <summary>
            Pegar Usuário pelo Id
            </summary>
            <param name="idUsuario">int</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o usuario</response>
            <response code="404">Usuario não existente</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.UsuarioControlador.PegarUsuarioPeloNomeAsync(System.String)">
            <summary>
            Pegar usuario pelo Nome
            </summary>
            <param name="nomeUsuario">string</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o usuario</response>
            <response code="204">Nome não existe</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.UsuarioControlador.PegarUsuarioPeloEmailAsync(System.String)">
            <summary>
            Pegar usuario pelo Email
            </summary>
            <param name="emailUsuario">string</param>
            <returns>ActionResult</returns>
            <response code="200">Retorna o usuario</response>
            <response code="404">Email não existente</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.UsuarioControlador.NovoUsuarioAsync(BlogPessoalVS.src.dtos.NovoUsuarioDTO)">
             <summary>
             Criar novo Usuario
             </summary>
             <param name="usuario">NovoUsuarioDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 POST /api/Usuarios
                 {
                    "nome": "Leticia Zimerer",
                    "email": "leticia@gmail.com",
                    "senha": "1234",
                    "foto": "URLFOTO",
                    "tipo": "NORMAL"
                 }
            
             </remarks>
             <response code="201">Retorna usuario criado</response>
             <response code="400">Erro na requisição</response>
             <response code="401">E-mail ja cadastrado</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.UsuarioControlador.AtualizarUsuarioAsync(BlogPessoalVS.src.dtos.AtualizarUsuarioDTO)">
             <summary>
             Atualizar Usuario
             </summary>
             <param name="usuario">AtualizarUsuarioDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 PUT /api/Usuarios
                 {
                    "id": 1,    
                    "nome": "Leticia Zimerer",
                    "senha": "1234",
                    "foto": "URLFOTO"
                 }
            
             </remarks>
             <response code="200">Retorna usuario atualizado</response>
             <response code="400">Erro na requisição</response>
        </member>
        <member name="M:BlogPessoalVS.src.controladores.UsuarioControlador.DeletarUsuarioAsync(System.Int32)">
            <summary>
            Deletar usuario pelo Id
            </summary>
            <param name="idUsuario">int</param>
            <returns>ActionResult</returns>
            <response code="204">Usuario deletado</response>
        </member>
        <member name="T:BlogPessoalVS.src.data.BlogPessoalVSContext">
            <summary>
            <para>Resumo> Classe contexto, responsavel por carregar contexto e definir Dbsets</para>
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 12/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.dtos.AutenticarDTO">
            <summary>
            <para>Resumo> Criando AutenticaçãoDTO</para>
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 10/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.dtos.NovaPostagemDTO">
            <summary>
            <para>Resumo> Classe responsavel por representar tb_postagens no banco</para>
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 12/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.dtos.AtualizarPostagemDTO">
            <summary>
            <para>Resumo> Classe espelho para atualizar uma Postagem</para>
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.dtos.NovoTemaDTO">
            <summary>
            <para>Resumo> Classe espelho para criar um novo Tema</para> // é "para" até para o inglês
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.dtos.AtualizarTemaDTO">
            <summary>
            <para>Resumo> Classe espelho para atualizar um novo tema</para>
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.dtos.NovoUsuarioDTO">
            <summary>
            <para>Resumo> Classe espelho para criar um novo usuario</para> // é "para" até para o inglês
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.dtos.AtualizarUsuarioDTO">
            <summary>
            <para>Resumo> Classe espelho para alterar um usuario</para> // é "para" até para o inglês
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.modelos.TemaModelo">
            <summary>
            <para>Resumo> Classe responsavel por representar tb_temas no banco</para>
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 12/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.modelos.UsuarioModelo">
            <summary>
            <para>Resumo> Classe responsavel por representar tb_usuarios no banco</para>
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 12/05/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.repositorios.implementacoes.UsuarioRepositorio">
            <summary>
            <para>Resumo> Classe responsavel por implementar IUsuario</para>
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 12/05/2022</para>
            </summary>
        </member>
        <member name="M:BlogPessoalVS.src.repositorios.implementacoes.UsuarioRepositorio.PegarUsuarioPeloEmailAsync(System.String)">
            <summary>
            <para>Resumo> Método assíncrono para pegar um usuario pelo Email</para>
            </summary>
            <param email="id">Id do usuario</param>
        </member>
        <member name="M:BlogPessoalVS.src.repositorios.implementacoes.UsuarioRepositorio.PegarUsuarioPeloIdAsync(System.Int32)">
            <summary>
            <para>Resumo> Método assíncrono para pegar um usuario pelo Id</para>
            </summary>
            <param nome="id">Id do usuario</param>
            <return>UsuarioModelo</return>
        </member>
        <member name="M:BlogPessoalVS.src.repositorios.implementacoes.UsuarioRepositorio.PegarUsuariosPeloNomeAsync(System.String)">
            <summary>
            <para>Resumo> Método assíncrono para pegar um usuario pelo Nome</para>
            </summary>
            <param nome="nome">Id do usuario</param>
            <return>UsuarioModelo</return>
        </member>
        <member name="T:BlogPessoalVS.src.repositorios.IPostagem">
            <summary>
            <para>Resumo> Responsavel por representar ações de CRUD de postagem</para> // é "para" até para o inglês
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.repositorios.ITema">
            <summary>
            <para>Resumo> Responsavel por representar ações de CRUD de tema</para> // é "para" até para o inglês
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:BlogPessoalVS.src.repositorios.IUsuario">
            <summary>
            <para>Resumo> Responsavel por representar ações de CRUD de usuario</para> // é "para" até para o inglês
            <para>Criado por: Leticia Zimerer</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
    </members>
</doc>
